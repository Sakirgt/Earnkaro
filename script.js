// --- Firebase SDK Imports ---
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
import { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged, updatePassword, EmailAuthProvider, reauthenticateWithCredential } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-auth.js";
import { getFirestore, doc, setDoc, getDoc, updateDoc, collection, query, where, getDocs, limit, increment, serverTimestamp, orderBy, addDoc, Timestamp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";
import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-storage.js";
import { getAnalytics } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-analytics.js";

// --- Firebase Config ---
const firebaseConfig = {
  apiKey: "AIzaSyAEJ9_eiVk5oQP9mhBZ-hBc90jeyIu4GKY",
  authDomain: "watch-and-earn-dc015.firebaseapp.com",
  projectId: "watch-and-earn-dc015",
  storageBucket: "watch-and-earn-dc015.appspot.com",
  messagingSenderId: "848008267595",
  appId: "1:848008267595:web:89ff8460361c9f9759cace",
  measurementId: "G-QTGZ9TDEQG"
};

// --- Initialize Firebase ---
let app;
let auth;
let db;
let storage;
let analytics;
try {
    app = initializeApp(firebaseConfig);
    auth = getAuth(app);
    db = getFirestore(app);
    storage = getStorage(app);
    analytics = getAnalytics(app);
    console.log("Firebase Initialized Successfully.");
} catch (error) {
    console.error("!!! Firebase Initialization Failed:", error);
    alert("Error initializing the application. Please check the console.");
}

// --- Ad Network IDs ---
const ADMOB_APP_ID = "ca-app-pub-6727877283623739~4474796583";
const ADMOB_BANNER_UNIT_ID = "ca-app-pub-6727877283623739/6194339842";
const ADMOB_INTERSTITIAL_UNIT_ID = "ca-app-pub-6727877283623739/1722141168";
const ADMOB_REWARDED_UNIT_ID = "ca-app-pub-6727877283623739/7563261839";
const UNITY_GAME_ID = '5038079';
const UNITY_REWARDED_PLACEMENT_ID = 'Rewarded_Android_52f1c129_5c7b_4dbd_b5e5_36ed0b235143';
const UNITY_INTERSTITIAL_PLACEMENT_ID = 'Interstitial_Android_9d8000d1_d42d_4476_ac23_cd08b0338549';

// --- Constants ---
const NEW_USER_REFERRAL_BONUS = 50;
const REFERRER_BONUS = 500;
const WATCH_AD_REWARD = 40; // AdMob Rewarded
const DAILY_LOGIN_REWARD = 20;
const TTT_WIN_REWARD_PER_LEVEL = 10;
const GK_QUIZ_COMPLETION_BONUS = 30;
const GAME_COMPLETION_AD_REWARD = 20; // Unity Ad after game
const tttMaxLevel = 10;
const GK_QUESTIONS_PER_SESSION = 5;
const LEADERBOARD_LIMIT = 10;
const MIN_WITHDRAWAL_AMOUNT = 1000;
const DEFAULT_AVATAR_URL = 'placeholder-avatar.png';

// --- Global State ---
let currentUserData = null;
let currentUserId = null;
let activeBannerContainers = [];
let isAdMobInitialized = false;
let isUnityAdsInitialized = false;
let isAdMobInterstitialReady = false;
let isAdMobRewardedReady = false;
let isUnityRewardedReady = false;
let tttBoard = Array(9).fill('');
let tttCurrentPlayer = 'X';
let tttIsGameOver = false;
let tttCurrentLevel = 1;
let gkQuestionsPool = [];
let currentGkQuizQuestions = [];
let currentGkQuestionIndex = 0;
let currentGkQuizCorrectAnswers = 0;

// --- DOM Element References ---
const authSection = document.getElementById('authSection');
const signupForm = document.getElementById('signupForm');
const loginForm = document.getElementById('loginForm');
const mainContent = document.getElementById('mainContent');
const tttSection = document.getElementById('tttSection');
const gkQuizSection = document.getElementById('gkQuizSection');
const profileSection = document.getElementById('profileSection');
const referralSection = document.getElementById('referralSection');
const leaderboardSection = document.getElementById('leaderboardSection');
const historySection = document.getElementById('historySection');
const bottomNav = document.getElementById('bottomNav');
const userInfoHeader = document.getElementById('user-info-header');
const userTokenDisplayHeader = document.getElementById('user-token-display-header');
const userReferralCodeDisplay = document.getElementById('user-referral-code-display');
const signupEmailInput = document.getElementById('signup-email');
const signupPasswordInput = document.getElementById('signup-password');
const signupReferralCodeInput = document.getElementById('signup-referral-code');
const signupButton = document.getElementById('signup-button');
const signupFeedback = document.getElementById('signup-feedback');
const loginEmailInput = document.getElementById('login-email');
const loginPasswordInput = document.getElementById('login-password');
const loginButton = document.getElementById('login-button');
const loginFeedback = document.getElementById('login-feedback');
const showLoginButton = document.getElementById('show-login-button');
const showSignupButton = document.getElementById('show-signup-button');
const playTttBtn = document.getElementById('playTttBtn');
const playGkQuizBtn = document.getElementById('playGkQuizBtn');
const watchAdMainButton = document.getElementById('watchAdMainButton');
const claimDailyRewardButton = document.getElementById('claim-daily-reward-button');
const dailyRewardFeedback = document.getElementById('daily-reward-feedback');
const tttStatusDisplay = document.getElementById('tttStatus');
const tttGameBoard = document.getElementById('tttGameBoard');
const tttCells = tttGameBoard?.querySelectorAll('.cell');
const tttRestartButton = document.getElementById('tttRestartButton');
const tttBackToMenuBtn = document.getElementById('tttBackToMenuBtn');
const tttAdStatus = document.getElementById('ttt-ad-status');
const tttCurrentLevelDisplay = document.getElementById('tttCurrentLevel');
const tttMaxLevelDisplay = document.getElementById('tttMaxLevel');
const gkQuizTokensDisplay = document.getElementById('gkQuizTokens');
const gkQuestionNumberDisplay = document.getElementById('gkQuestionNumber');
const gkTotalQuestionsDisplay = document.getElementById('gkTotalQuestions');
const gkQuestionText = document.getElementById('gkQuestionText');
const gkOptionsContainer = document.getElementById('gkOptionsContainer');
const gkFeedback = document.getElementById('gkFeedback');
const gkAdStatus = document.getElementById('gk-ad-status');
const gkNextButton = document.getElementById('gkNextButton');
const gkQuizBackToMenuBtn = document.getElementById('gkQuizBackToMenuBtn');
const navHomeBtn = document.getElementById('nav-home');
const navReferBtn = document.getElementById('nav-refer');
const navLeaderboardBtn = document.getElementById('nav-leaderboard');
const navHistoryBtn = document.getElementById('nav-history');
const navProfileBottomBtn = document.getElementById('nav-profile-bottom');
const navProfileHeaderBtn = document.getElementById('nav-profile-header');
const logoutButtonProfile = document.getElementById('logout-button-profile');
const profileAvatarImg = document.getElementById('profile-avatar-img');
const avatarUploadInput = document.getElementById('avatar-upload-input');
const avatarUploadStatus = document.getElementById('avatar-upload-status');
const profileEmailDisplay = document.getElementById('profile-email-display');
const profileNameDisplay = document.getElementById('profile-name-display');
const editNameButton = document.getElementById('edit-name-button');
const editNameForm = document.getElementById('edit-name-form');
const editNameInput = document.getElementById('edit-name-input');
const saveNameButton = document.getElementById('save-name-button');
const cancelEditNameButton = document.getElementById('cancel-edit-name-button');
const changePasswordButton = document.getElementById('change-password-button');
const profileReferralCodeDisplay = document.getElementById('profile-referral-code-display');
const profileTokenDisplay = document.getElementById('profile-token-display');
const profileReferralCountDisplay = document.getElementById('profile-referral-count-display');
const withdrawalAmountInput = document.getElementById('withdrawal-amount');
const withdrawalMethodSelect = document.getElementById('withdrawal-method');
const withdrawalDetailsInput = document.getElementById('withdrawal-details');
const submitWithdrawalButton = document.getElementById('submit-withdrawal-button');
const withdrawalFeedback = document.getElementById('withdrawal-feedback');
const referCodeDisplay = document.getElementById('refer-code-display');
const referLinkDisplay = document.getElementById('refer-link-display');
const copyReferralButton = document.getElementById('copy-referral-button');
const referralCountDisplay = document.getElementById('referral-count-display');
const leaderboardListContainer = document.getElementById('leaderboard-list');
const historyListContainer = document.getElementById('history-list');

// --- Utility Functions ---
function getTodayDateString() { const today = new Date(); const year = today.getFullYear(); const month = String(today.getMonth() + 1).padStart(2, '0'); const day = String(today.getDate()).padStart(2, '0'); return `${year}-${month}-${day}`; }
function showSection(sectionElement) { activeBannerContainers.forEach(containerId => { hideAdMobBanner_hopweb(ADMOB_BANNER_UNIT_ID, containerId); }); activeBannerContainers = []; const sections = [authSection, mainContent, tttSection, gkQuizSection, profileSection, referralSection, leaderboardSection, historySection]; sections.forEach(sec => sec?.classList.add('hidden')); bottomNav.classList.add('hidden'); if (sectionElement) { sectionElement.classList.remove('hidden'); if (sectionElement !== authSection) { bottomNav.classList.remove('hidden'); } const bannerPlaceholders = sectionElement.querySelectorAll('.ad-container.banner-ad'); bannerPlaceholders.forEach(placeholder => { if (placeholder.id) { showAdMobBanner_hopweb(ADMOB_BANNER_UNIT_ID, placeholder.id); activeBannerContainers.push(placeholder.id); } else { console.warn("Banner container without ID in section:", sectionElement.id); } }); } }
function updateFeedback(element, message, isError = true) { if (!element) return; element.textContent = message; element.style.color = isError ? '#ff5050' : '#00ff88'; }
function clearFeedback(...elements) { elements.forEach(el => { if (el) el.textContent = ''; }); }
function updateTokenDisplay(tokens) { const displayTokens = tokens ?? 0; if (userTokenDisplayHeader) userTokenDisplayHeader.textContent = displayTokens; if (gkQuizTokensDisplay) gkQuizTokensDisplay.textContent = displayTokens; if (profileTokenDisplay) profileTokenDisplay.textContent = displayTokens; }
function updateReferralCountDisplay(count) { const displayCount = count ?? 0; if (profileReferralCountDisplay) profileReferralCountDisplay.textContent = displayCount; if (referralCountDisplay) referralCountDisplay.textContent = displayCount; }
async function addTokens(userId, amount, reason = "general_reward") { if (!userId || !amount || !db) return; const userRef = doc(db, "users", userId); const transactionRef = collection(db, "transactions"); try { await updateDoc(userRef, { tokens: increment(amount), lastTokenUpdateReason: reason, lastTokenUpdateTime: serverTimestamp() }); console.log(`${amount > 0 ? '+' : ''}${amount} tokens for ${userId}: ${reason}`); await addDoc(transactionRef, { userId: userId, amount: amount, reason: reason, timestamp: serverTimestamp() }); console.log("Transaction logged successfully."); if (currentUserData && currentUserData.uid === userId) { currentUserData.tokens = (currentUserData.tokens || 0) + amount; updateTokenDisplay(currentUserData.tokens); } else if (userId === currentUserId) { await fetchUserData(userId); } } catch (error) { console.error(`Token update or transaction log error for ${userId}:`, error); } }
function generateReferralCode(userId) { if (!userId) return 'ERRORCODE'; const uidPart = userId.substring(userId.length - 6).toUpperCase(); const randomPart = Math.random().toString(36).substring(2, 4).toUpperCase(); return `${uidPart}${randomPart}`; }
function showLoginForm() { if (!loginForm || !signupForm) { console.error("Login/Signup form missing!"); return; } loginForm.classList.remove('hidden'); signupForm.classList.add('hidden'); clearFeedback(signupFeedback, loginFeedback); if(loginEmailInput) loginEmailInput.value = ''; if(loginPasswordInput) loginPasswordInput.value = ''; }
function showSignupForm() { if (!loginForm || !signupForm) { console.error("Login/Signup form missing!"); return; } signupForm.classList.remove('hidden'); loginForm.classList.add('hidden'); clearFeedback(signupFeedback, loginFeedback); if(signupEmailInput) signupEmailInput.value = ''; if(signupPasswordInput) signupPasswordInput.value = ''; if(signupReferralCodeInput) signupReferralCodeInput.value = ''; }
function formatFirestoreTimestamp(timestamp) { if (!timestamp) return 'N/A'; const date = timestamp.toDate(); return date.toLocaleString(); }

// --- Authentication Logic ---
if (auth) { onAuthStateChanged(auth, async (user) => { console.log("onAuthStateChanged triggered. User:", user ? user.uid : 'null'); clearFeedback(signupFeedback, loginFeedback); if (user) { console.log("User is logged in:", user.uid); currentUserId = user.uid; await fetchUserData(user.uid); checkDailyRewardStatus(); showSection(mainContent); if (userInfoHeader) userInfoHeader.classList.remove('hidden'); } else { console.log("User is logged out."); currentUserId = null; currentUserData = null; showSection(authSection); showLoginForm(); if (userInfoHeader) userInfoHeader.classList.add('hidden'); updateTokenDisplay(0); updateReferralCountDisplay(0); if(userReferralCodeDisplay) userReferralCodeDisplay.textContent = 'N/A'; if(profileEmailDisplay) profileEmailDisplay.textContent = '...'; if(profileNameDisplay) profileNameDisplay.textContent = '...'; if(profileAvatarImg) profileAvatarImg.src = DEFAULT_AVATAR_URL; if(profileReferralCodeDisplay) profileReferralCodeDisplay.textContent = '...'; if(profileReferralCountDisplay) profileReferralCountDisplay.textContent = '...'; if(referCodeDisplay) referCodeDisplay.textContent = '...'; if(referLinkDisplay) referLinkDisplay.textContent = 'Login to see'; if(copyReferralButton) copyReferralButton.disabled = true; if(claimDailyRewardButton) { claimDailyRewardButton.disabled = true; claimDailyRewardButton.textContent = 'Claim Daily Reward'; claimDailyRewardButton.classList.remove('claimed'); } if(dailyRewardFeedback) dailyRewardFeedback.textContent = ''; } }); } else { console.error("Firebase Auth object is not available. Auth listener not set."); alert("Authentication service failed to load. Please refresh."); }
async function fetchUserData(userId) { console.log(`Fetching user data for: ${userId}`); if (!userId || !db) { console.error("Cannot fetch user data: No userId or db connection."); return; } const userRef = doc(db, "users", userId); try { const docSnap = await getDoc(userRef); if (docSnap.exists()) { currentUserData = { uid: docSnap.id, ...docSnap.data() }; console.log("User data fetched:", currentUserData); updateTokenDisplay(currentUserData.tokens || 0); updateReferralCountDisplay(currentUserData.referrals || 0); if(userReferralCodeDisplay) userReferralCodeDisplay.textContent = currentUserData.referralCode || 'Generating...'; if(profileNameDisplay) profileNameDisplay.textContent = currentUserData.name || 'Guest'; if(profileAvatarImg) profileAvatarImg.src = currentUserData.avatarUrl || DEFAULT_AVATAR_URL; if (!currentUserData.referralCode) { const newCode = generateReferralCode(userId); await updateDoc(userRef, { referralCode: newCode }); currentUserData.referralCode = newCode; if(userReferralCodeDisplay) userReferralCodeDisplay.textContent = newCode; console.log("Generated missing referral code."); } tttCurrentLevel = currentUserData.tttLevel || 1; } else { console.warn(`No user document found for ${userId}! Creating...`); const newCode = generateReferralCode(userId); await setDoc(userRef, { email: auth?.currentUser?.email || 'unknown', name: 'Guest', avatarUrl: null, uid: userId, createdAt: serverTimestamp(), tokens: 0, referralCode: newCode, referrals: 0, referredBy: null, lastLogin: serverTimestamp(), lastDailyClaimDate: null, tttLevel: 1 }); console.log("New user document created."); await fetchUserData(userId); } } catch (error) { console.error("Fetch User Data Error:", error); updateTokenDisplay(0); updateReferralCountDisplay(0); if(userReferralCodeDisplay) userReferralCodeDisplay.textContent = 'Error'; if(profileEmailDisplay) profileEmailDisplay.textContent = 'Error'; if(profileNameDisplay) profileNameDisplay.textContent = 'Error'; if(profileAvatarImg) profileAvatarImg.src = DEFAULT_AVATAR_URL; if(profileReferralCodeDisplay) profileReferralCodeDisplay.textContent = 'Error'; if(profileReferralCountDisplay) profileReferralCountDisplay.textContent = 'Error'; if(referCodeDisplay) referCodeDisplay.textContent = 'Error'; if(referLinkDisplay) referLinkDisplay.textContent = 'Error'; if(copyReferralButton) copyReferralButton.disabled = true; currentUserData = null; } }

// --- Referral Handling ---
async function handleReferral(referrerCode, newUserId) { if (!referrerCode || !newUserId) return false; const usersRef = collection(db, "users"); const upperCaseCode = referrerCode.trim().toUpperCase(); const q = query(usersRef, where("referralCode", "==", upperCaseCode), limit(1)); try { const querySnapshot = await getDocs(q); if (!querySnapshot.empty) { const referrerDoc = querySnapshot.docs[0]; const referrerId = referrerDoc.id; if (referrerId === newUserId) { console.log("Self referral attempt blocked."); updateFeedback(signupFeedback, "You cannot use your own referral code.", true); return false; } console.log(`Referrer found: ${referrerId}`); await addTokens(newUserId, NEW_USER_REFERRAL_BONUS, `referred_by_${referrerId}`); await addTokens(referrerId, REFERRER_BONUS, `referred_user_${newUserId}`); const newUserRef = doc(db, "users", newUserId); await updateDoc(newUserRef, { referredBy: referrerId }); const referrerUserRef = doc(db, "users", referrerId); await updateDoc(referrerUserRef, { referrals: increment(1) }); console.log("Referral processed successfully."); return true; } else { console.log("Referral code not found:", referrerCode); updateFeedback(signupFeedback, "Invalid referral code.", true); return false; } } catch (error) { console.error("Referral handling error:", error); updateFeedback(signupFeedback, "Error processing referral code. Please try again.", true); return false; } }

// --- Daily Login Logic ---
function checkDailyRewardStatus() { if (!currentUserData || !claimDailyRewardButton || !dailyRewardFeedback) return; const todayStr = getTodayDateString(); const lastClaimDate = currentUserData.lastDailyClaimDate; if (lastClaimDate === todayStr) { claimDailyRewardButton.disabled = true; claimDailyRewardButton.textContent = 'Reward Claimed Today'; claimDailyRewardButton.classList.add('claimed'); dailyRewardFeedback.textContent = `Come back tomorrow for more!`; updateFeedback(dailyRewardFeedback, dailyRewardFeedback.textContent, false); } else { claimDailyRewardButton.disabled = false; claimDailyRewardButton.textContent = `Claim Daily Reward (+${DAILY_LOGIN_REWARD} Tokens)`; claimDailyRewardButton.classList.remove('claimed'); dailyRewardFeedback.textContent = 'Click the button to get your daily bonus!'; updateFeedback(dailyRewardFeedback, dailyRewardFeedback.textContent, false); } }
async function claimDailyReward() { if (!currentUserId || !currentUserData || !claimDailyRewardButton || !dailyRewardFeedback) return; const todayStr = getTodayDateString(); const lastClaimDate = currentUserData.lastDailyClaimDate; if (lastClaimDate === todayStr) { console.warn("Attempted to claim daily reward again today."); alert("You have already claimed your reward today."); return; } claimDailyRewardButton.disabled = true; claimDailyRewardButton.textContent = 'Claiming...'; try { const userRef = doc(db, "users", currentUserId); await updateDoc(userRef, { lastDailyClaimDate: todayStr }); currentUserData.lastDailyClaimDate = todayStr; await addTokens(currentUserId, DAILY_LOGIN_REWARD, 'daily_login_bonus'); claimDailyRewardButton.textContent = 'Reward Claimed Today'; claimDailyRewardButton.classList.add('claimed'); dailyRewardFeedback.textContent = `+${DAILY_LOGIN_REWARD} tokens added! Come back tomorrow.`; updateFeedback(dailyRewardFeedback, dailyRewardFeedback.textContent, false); alert(`Daily reward claimed! +${DAILY_LOGIN_REWARD} tokens.`); } catch (error) { console.error("Error claiming daily reward:", error); alert("Failed to claim daily reward. Please try again."); claimDailyRewardButton.disabled = false; claimDailyRewardButton.textContent = `Claim Daily Reward (+${DAILY_LOGIN_REWARD} Tokens)`; updateFeedback(dailyRewardFeedback, "Error claiming reward.", true); } }

// --- Ad Logic Handlers (Generic) ---
function handleAdComplete(adType, rewardAmount, network = "Unknown") { console.log(`${network} ${adType} completed.`); if (currentUserId && rewardAmount > 0) { addTokens(currentUserId, rewardAmount, `${network}_${adType}`); alert(`Ad finished! You earned +${rewardAmount} tokens.`); } else if (rewardAmount > 0){ alert("Ad finished, but reward could not be applied. Please check your connection."); } else { console.log(`${network} Ad finished, no reward specified.`); } }
function handleAdError(adType, errorMessage, network = "Unknown") { console.error(`${network} ${adType} failed: ${errorMessage}`); alert(`${network} Ad could not be shown or was skipped. No reward granted.`); }

// --- AdMob Placeholder Functions (REPLACE with hopweb API calls) ---
function initializeAdMob_hopweb() { console.log(`SIM: Initializing AdMob via hopweb (App ID: ${ADMOB_APP_ID})`); isAdMobInitialized = true; console.log("SIM: AdMob Initialized (Placeholder)."); loadAdMobInterstitial_hopweb(); loadAdMobRewarded_hopweb(); }
function showAdMobBanner_hopweb(unitId, containerId) { const container = document.getElementById(containerId); if (!container) { console.warn(`SIM AdMob: Banner container #${containerId} not found.`); return; } if (!isAdMobInitialized) { console.warn("SIM AdMob: SDK not initialized, cannot show banner."); return;} console.log(`SIM AdMob: Show Banner ${unitId.slice(-10)} in #${containerId} (via hopweb)`); container.innerHTML = `<div style="background:#444; color:#ccc; text-align:center; padding:15px 5px; font-size:0.8em; border: 1px solid #555; min-height: 50px; display:flex; align-items:center; justify-content:center;">Simulated AdMob Banner (${unitId.slice(-10)})</div>`; container.classList.remove('hidden'); }
function hideAdMobBanner_hopweb(unitId, containerId) { const container = document.getElementById(containerId); if (!container || container.classList.contains('hidden')) return; console.log(`SIM AdMob: Hide Banner ${unitId.slice(-10)} in #${containerId} (via hopweb)`); container.classList.add('hidden'); container.innerHTML = `<p>Banner Ad Area</p>`; }
function loadAdMobInterstitial_hopweb() { if (!isAdMobInitialized) { console.warn("SIM AdMob: SDK not initialized, cannot load Interstitial."); return;} console.log(`SIM AdMob: Loading Interstitial ${ADMOB_INTERSTITIAL_UNIT_ID.slice(-10)} (via hopweb)`); isAdMobInterstitialReady = false; setTimeout(() => { console.log("SIM AdMob: Interstitial Loaded (Placeholder)."); isAdMobInterstitialReady = true; }, 1000); }
function showAdMobInterstitial_hopweb(adType, closedCallback) { console.log(`SIM AdMob: Attempting to show Interstitial for ${adType} (via hopweb)`); if (!isAdMobInitialized) { console.error("SIM AdMob: SDK not initialized."); if(closedCallback) closedCallback(); return; } if (!isAdMobInterstitialReady) { console.warn("SIM AdMob: Interstitial not ready."); loadAdMobInterstitial_hopweb(); if(closedCallback) closedCallback(); return; } alert(`Simulating AdMob Interstitial before '${adType}'.\n\nClick OK = Ad Closed`); isAdMobInterstitialReady = false; loadAdMobInterstitial_hopweb(); if (closedCallback) closedCallback(); }
function loadAdMobRewarded_hopweb() { if (!isAdMobInitialized) { console.warn("SIM AdMob: SDK not initialized, cannot load Rewarded."); return;} console.log(`SIM AdMob: Loading Rewarded Ad ${ADMOB_REWARDED_UNIT_ID.slice(-10)} (via hopweb)`); isAdMobRewardedReady = false; setTimeout(() => { console.log("SIM AdMob: Rewarded Ad Loaded (Placeholder)."); isAdMobRewardedReady = true; }, 1500); }
function showAdMobRewarded_hopweb(adType, rewardAmount, successCallback, failureCallback) { console.log(`SIM AdMob: Attempting to show Rewarded Ad for ${adType} (via hopweb)`); if (!isAdMobInitialized) { console.error("SIM AdMob: SDK not initialized."); if(failureCallback) failureCallback("SDK not initialized"); return; } if (!isAdMobRewardedReady) { console.warn("SIM AdMob: Rewarded Ad not ready."); alert("Rewarded Ad is loading, please try again shortly."); loadAdMobRewarded_hopweb(); if(failureCallback) failureCallback("Ad not ready"); return; } alert(`Simulating AdMob Rewarded Ad for '${adType}'.\n\nClick OK = Watched Successfully\nClick Cancel = Skipped/Error`); const didWatch = true; isAdMobRewardedReady = false; loadAdMobRewarded_hopweb(); if (didWatch) { handleAdComplete(adType, rewardAmount, "AdMob"); if (successCallback) successCallback(); } else { handleAdError(adType, "User skipped or ad failed (simulated).", "AdMob"); if (failureCallback) failureCallback(); } }

// --- Unity Ads Placeholder Functions (REPLACE with hopweb API calls) ---
function initializeUnityAds_hopweb() { console.log(`SIM: Initializing Unity Ads via hopweb (Game ID: ${UNITY_GAME_ID})`); isUnityAdsInitialized = true; console.log("SIM: Unity Ads Initialized (Placeholder)."); loadUnityRewarded_hopweb(); }
function loadUnityRewarded_hopweb() { if (!isUnityAdsInitialized) { console.warn("SIM Unity: SDK not initialized, cannot load Rewarded."); return;} console.log(`SIM Unity: Loading Rewarded Ad Placement: ${UNITY_REWARDED_PLACEMENT_ID} (via hopweb)`); isUnityRewardedReady = false; setTimeout(() => { console.log("SIM Unity: Rewarded Ad Loaded (Placeholder)."); isUnityRewardedReady = true; }, 1500); }
function showUnityRewarded_hopweb(adType, rewardAmount, successCallback, failureCallback) { console.log(`SIM Unity: Attempting to show Rewarded Ad Placement ${UNITY_REWARDED_PLACEMENT_ID} for ${adType} (via hopweb)`); if (!isUnityAdsInitialized) { console.error("SIM Unity: SDK not initialized."); if(failureCallback) failureCallback("SDK not initialized"); return; } if (!isUnityRewardedReady) { console.warn("SIM Unity: Rewarded Ad not ready."); alert("Game Reward Ad is loading, please try again shortly."); loadUnityRewarded_hopweb(); if(failureCallback) failureCallback("Ad not ready"); return; } alert(`Simulating Unity Rewarded Ad for '${adType}'.\n\nClick OK = Watched Successfully\nClick Cancel = Skipped/Error`); const didWatch = true; isUnityRewardedReady = false; loadUnityRewarded_hopweb(); if (didWatch) { handleAdComplete(adType, rewardAmount, "UnityAds"); if (successCallback) successCallback(); } else { handleAdError(adType, "User skipped or ad failed (simulated).", "UnityAds"); if (failureCallback) failureCallback(); } }

// --- Game Completion Ad Logic ---
function showGameCompletionAd(gameType) { console.log(`Game completed: ${gameType}. Showing Unity Rewarded Ad.`); const adStatusElement = gameType === 'ttt' ? tttAdStatus : gkAdStatus; if (adStatusElement) updateFeedback(adStatusElement, "Loading bonus reward ad...", false); showUnityRewarded_hopweb( `${gameType}_complete_reward`, GAME_COMPLETION_AD_REWARD, () => { console.log(`${gameType} completion ad watched successfully.`); if (adStatusElement) updateFeedback(adStatusElement, `+${GAME_COMPLETION_AD_REWARD} bonus tokens added!`, false); setTimeout(() => { if (adStatusElement) clearFeedback(adStatusElement); }, 3000); }, () => { console.log(`${gameType} completion ad failed or skipped.`); if (adStatusElement) updateFeedback(adStatusElement, "Bonus ad skipped. No extra tokens.", true); setTimeout(() => { if (adStatusElement) clearFeedback(adStatusElement); }, 3000); } ); }

// --- Profile Section Logic ---
// (populateProfileSection, populateReferralSection, fetchAndDisplayLeaderboard - UNCHANGED)
function populateProfileSection() { if (!currentUserData) { console.log("Cannot populate profile, no user data."); if(profileEmailDisplay) profileEmailDisplay.textContent = 'N/A'; if(profileNameDisplay) profileNameDisplay.textContent = 'N/A'; if(profileAvatarImg) profileAvatarImg.src = DEFAULT_AVATAR_URL; if(profileReferralCodeDisplay) profileReferralCodeDisplay.textContent = 'N/A'; if(profileTokenDisplay) profileTokenDisplay.textContent = '0'; if(profileReferralCountDisplay) profileReferralCountDisplay.textContent = '0'; return; } if (profileEmailDisplay) profileEmailDisplay.textContent = currentUserData.email || 'N/A'; if (profileNameDisplay) profileNameDisplay.textContent = currentUserData.name || 'Guest'; if (profileAvatarImg) profileAvatarImg.src = currentUserData.avatarUrl || DEFAULT_AVATAR_URL; if (profileReferralCodeDisplay) profileReferralCodeDisplay.textContent = currentUserData.referralCode || 'N/A'; if (profileTokenDisplay) profileTokenDisplay.textContent = currentUserData.tokens || 0; if (profileReferralCountDisplay) profileReferralCountDisplay.textContent = currentUserData.referrals || 0; if(editNameForm) editNameForm.classList.add('hidden'); if(editNameButton) editNameButton.classList.remove('hidden'); if(profileNameDisplay) profileNameDisplay.classList.remove('hidden'); }
function populateReferralSection() { if (!currentUserData) { console.log("Cannot populate referral section, no user data."); if(referCodeDisplay) referCodeDisplay.textContent = 'N/A'; if(referLinkDisplay) referLinkDisplay.textContent = 'Login to see'; if(referralCountDisplay) referralCountDisplay.textContent = '0'; if(copyReferralButton) copyReferralButton.disabled = true; return; } const userCode = currentUserData.referralCode || 'N/A'; const userReferrals = currentUserData.referrals || 0; const referralLink = userCode !== 'N/A' ? `${window.location.origin}${window.location.pathname}?ref=${userCode}` : 'Generate code first'; if (referCodeDisplay) referCodeDisplay.textContent = userCode; if (referralCountDisplay) referralCountDisplay.textContent = userReferrals; if (referLinkDisplay) referLinkDisplay.textContent = referralLink; if (copyReferralButton) copyReferralButton.disabled = (userCode === 'N/A'); }
async function fetchAndDisplayLeaderboard() { if (!leaderboardListContainer) return; leaderboardListContainer.innerHTML = '<p>Loading...</p>'; const usersRef = collection(db, "users"); const q = query(usersRef, orderBy("referrals", "desc"), limit(LEADERBOARD_LIMIT)); try { const querySnapshot = await getDocs(q); if (querySnapshot.empty) { leaderboardListContainer.innerHTML = '<p>No users found for leaderboard yet.</p>'; return; } let leaderboardHTML = '<ol>'; querySnapshot.forEach((doc) => { const userData = doc.data(); const displayName = userData.name || (userData.email ? userData.email.split('@')[0] : `User...${doc.id.substring(doc.id.length - 4)}`); const referralCount = userData.referrals || 0; leaderboardHTML += `<li><span class="leaderboard-name">${displayName}</span><span class="leaderboard-count">${referralCount}<span> refs</span></span></li>`; }); leaderboardHTML += '</ol>'; leaderboardListContainer.innerHTML = leaderboardHTML; } catch (error) { console.error("Error fetching leaderboard:", error); leaderboardListContainer.innerHTML = '<p>Error loading leaderboard. Please try again later.</p>'; } }

// --- History Section Logic ---
async function fetchAndDisplayHistory() { if (!historyListContainer || !currentUserId || !db) { if(historyListContainer) historyListContainer.innerHTML = '<p>Could not load history.</p>'; return; } historyListContainer.innerHTML = '<p>Loading history...</p>'; try { const transactionsRef = collection(db, "transactions"); const q = query(transactionsRef, where("userId", "==", currentUserId), orderBy("timestamp", "desc"), limit(50)); const querySnapshot = await getDocs(q); if (querySnapshot.empty) { historyListContainer.innerHTML = '<p>No transaction history found.</p>'; return; } let historyHTML = ''; querySnapshot.forEach((doc) => { const data = doc.data(); const amount = data.amount; const reason = data.reason.replace(/_/g, ' '); const timestamp = formatFirestoreTimestamp(data.timestamp); const type = amount > 0 ? 'earn' : 'spend'; historyHTML += `<div class="history-item ${type}"><div class="history-details"><span class="history-reason">${reason}</span><span class="history-timestamp">${timestamp}</span></div><div class="history-amount ${type}">${amount > 0 ? '+' : ''}${amount}</div></div>`; }); historyListContainer.innerHTML = historyHTML; } catch (error) { console.error("Error fetching transaction history:", error); historyListContainer.innerHTML = '<p>Error loading history. Please try again.</p>'; } }

// --- Tic Tac Toe Logic ---
const tttWinningConditions = [ [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6] ];
function startTttGame() { if (!currentUserId) { alert("Log in."); return; } tttCurrentLevel = currentUserData?.tttLevel || 1; resetTttGame(true); showSection(tttSection); }
function updateTttLevelDisplay() { if(tttCurrentLevelDisplay) tttCurrentLevelDisplay.textContent = tttCurrentLevel; if(tttMaxLevelDisplay) tttMaxLevelDisplay.textContent = tttMaxLevel; }
function resetTttGame(isNewLevelStart = true) { tttBoard.fill(''); tttCurrentPlayer = 'X'; tttIsGameOver = false; if (!isNewLevelStart) { tttCurrentLevel = currentUserData?.tttLevel || 1; } updateTttLevelDisplay(); if(tttStatusDisplay) { tttStatusDisplay.textContent = "Your Turn (X)"; tttStatusDisplay.style.color = '#00ff88'; } if(tttCells) { tttCells.forEach(cell => { if(cell) { cell.textContent = ''; cell.classList.remove('x', 'o', 'win'); cell.style.cursor = 'pointer'; } }); } if(tttGameBoard) { tttGameBoard.removeEventListener('click', handleTttClick); tttGameBoard.addEventListener('click', handleTttClick); } if(tttRestartButton) { tttRestartButton.textContent = `Restart Level ${tttCurrentLevel}`; tttRestartButton.disabled = false; } if(tttAdStatus) clearFeedback(tttAdStatus); }
function handleTttClick(event) { if (tttIsGameOver || tttCurrentPlayer !== 'X' || !event.target.classList.contains('cell')) return; const clickedCell = event.target; const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index')); if (isNaN(clickedCellIndex) || tttBoard[clickedCellIndex] !== '') return; makeTttMove(clickedCell, clickedCellIndex); if (!tttIsGameOver) { tttCurrentPlayer = 'O'; if(tttStatusDisplay) { tttStatusDisplay.textContent = "AI's Turn (O)"; tttStatusDisplay.style.color = '#ffffff'; } if(tttCells) tttCells.forEach(cell => {if(cell) cell.style.cursor = 'not-allowed'}); setTimeout(() => { if (!tttIsGameOver) { aiMakeMove(); } }, 600); } }
function makeTttMove(cellElement, index) { if (tttIsGameOver || tttBoard[index] !== '' || !cellElement) return; tttBoard[index] = tttCurrentPlayer; cellElement.textContent = tttCurrentPlayer; cellElement.classList.add(tttCurrentPlayer.toLowerCase()); cellElement.style.cursor = 'not-allowed'; const winner = checkTttWin(); if (winner) { endTttGame(false, winner); } else if (tttBoard.every(cell => cell !== '')) { endTttGame(true, null); } }
function checkTttWin() { for (const condition of tttWinningConditions) { const [a, b, c] = condition; if (tttBoard[a] && tttBoard[a] === tttBoard[b] && tttBoard[a] === tttBoard[c]) { if(tttCells) { condition.forEach(index => { if(tttCells[index]) tttCells[index].classList.add('win'); }); } return tttBoard[a]; } } return null; }
function aiMakeMove() { if (tttIsGameOver) return; let availableIndices = tttBoard.map((cell, index) => cell === '' ? index : null).filter(val => val !== null); if (availableIndices.length === 0) return; let moveIndex = -1; for (const index of availableIndices) { tttBoard[index] = 'O'; if (checkTttWin() === 'O') { moveIndex = index; tttBoard[index] = ''; break; } tttBoard[index] = ''; } if (moveIndex === -1) { for (const index of availableIndices) { tttBoard[index] = 'X'; if (checkTttWin() === 'X') { moveIndex = index; tttBoard[index] = ''; break; } tttBoard[index] = ''; } } if (moveIndex === -1 && availableIndices.includes(4)) { moveIndex = 4; } if (moveIndex === -1) { const corners = [0, 2, 6, 8].filter(index => availableIndices.includes(index)); if (corners.length > 0) { moveIndex = corners[Math.floor(Math.random() * corners.length)]; } } if (moveIndex === -1) { const sides = [1, 3, 5, 7].filter(index => availableIndices.includes(index)); if (sides.length > 0) { moveIndex = sides[Math.floor(Math.random() * sides.length)]; } } if (moveIndex === -1) { moveIndex = availableIndices[Math.floor(Math.random() * availableIndices.length)]; } if (moveIndex !== -1 && tttCells && tttCells[moveIndex]) { makeTttMove(tttCells[moveIndex], moveIndex); } if (!tttIsGameOver) { tttCurrentPlayer = 'X'; if(tttStatusDisplay) { tttStatusDisplay.textContent = "Your Turn (X)"; tttStatusDisplay.style.color = '#00ff88'; } if(tttCells) tttCells.forEach((cell, index) => { if (cell && tttBoard[index] === '') { cell.style.cursor = 'pointer'; } }); } }
async function endTttGame(isDraw, winner) { if (tttIsGameOver) return; tttIsGameOver = true; if(tttGameBoard) tttGameBoard.removeEventListener('click', handleTttClick); if(tttCells) tttCells.forEach(cell => {if(cell) cell.style.cursor = 'not-allowed'}); if(tttRestartButton) tttRestartButton.disabled = true; let baseMessage = ""; if (isDraw) { baseMessage = "Draw!"; if(tttStatusDisplay) { tttStatusDisplay.textContent = baseMessage; tttStatusDisplay.style.color = '#aaa'; } if(tttRestartButton) tttRestartButton.textContent = `Restart Level ${tttCurrentLevel}`; if(tttRestartButton) tttRestartButton.disabled = false; } else { if (winner === 'X') { baseMessage = `Level ${tttCurrentLevel} Cleared!`; if(tttStatusDisplay) { tttStatusDisplay.textContent = baseMessage; tttStatusDisplay.style.color = '#00ff88'; } const reward = TTT_WIN_REWARD_PER_LEVEL * tttCurrentLevel; await addTokens(currentUserId, reward, `ttt_level_${tttCurrentLevel}_win`); alert(`Win! +${reward} tokens.`); const canAdvance = tttCurrentLevel < tttMaxLevel; if (canAdvance) { prepareNextLevelButton(true, tttCurrentLevel + 1); } else { prepareNextLevelButton(false); } } else if (winner === 'O'){ baseMessage = "AI Wins! Try Again."; if(tttStatusDisplay) { tttStatusDisplay.textContent = baseMessage; tttStatusDisplay.style.color = '#ff5050'; } tttCurrentLevel = currentUserData?.tttLevel || 1; updateTttLevelDisplay(); if(tttRestartButton) tttRestartButton.textContent = `Restart Level ${tttCurrentLevel}`; if(tttRestartButton) tttRestartButton.disabled = false; } } showGameCompletionAd('ttt'); }
async function prepareNextLevelButton(isAdvancing, nextLevelNumber = 1) { if (isAdvancing) { const levelToSave = nextLevelNumber; if (currentUserId) { const userRef = doc(db, "users", currentUserId); try { await updateDoc(userRef, { tttLevel: levelToSave }); if(currentUserData) currentUserData.tttLevel = levelToSave; console.log("TTT level updated:", levelToSave); } catch (error) { console.error("TTT level update error:", error); } } tttCurrentLevel = levelToSave; updateTttLevelDisplay(); if(tttRestartButton) tttRestartButton.textContent = `Start Level ${tttCurrentLevel}`; if(tttRestartButton) tttRestartButton.disabled = false; } else { if(tttRestartButton) tttRestartButton.textContent = "Play Again (Level 1)"; tttCurrentLevel = 1; updateTttLevelDisplay(); if (currentUserId && currentUserData?.tttLevel !== tttMaxLevel) { const userRef = doc(db, "users", currentUserId); try{ await updateDoc(userRef, { tttLevel: tttMaxLevel }); if(currentUserData) currentUserData.tttLevel = tttMaxLevel; } catch(e){console.error("Error setting max TTT level:",e);} } else if (currentUserData) { currentUserData.tttLevel = tttMaxLevel; } if(tttRestartButton) tttRestartButton.disabled = false; } }

// --- GK Quiz Logic ---
const allGkQuestions = [ { q: "What is the capital of France?", o: ["Berlin", "Madrid", "Paris", "Rome"], a: 2 }, { q: "Which planet is known as the Red Planet?", o: ["Earth", "Mars", "Jupiter", "Saturn"], a: 1 }, { q: "Who wrote 'Hamlet'?", o: ["Charles Dickens", "William Shakespeare", "Leo Tolstoy", "Mark Twain"], a: 1 }, { q: "What is the largest ocean on Earth?", o: ["Atlantic", "Indian", "Arctic", "Pacific"], a: 3 }, { q: "What is the chemical symbol for Gold?", o: ["Go", "Ag", "Au", "Gd"], a: 2 }, { q: "In which year did World War II end?", o: ["1945", "1918", "1939", "1950"], a: 0 }, { q: "What is the tallest mountain in the world?", o: ["K2", "Kangchenjunga", "Makalu", "Mount Everest"], a: 3 }, { q: "Who painted the Mona Lisa?", o: ["Vincent van Gogh", "Pablo Picasso", "Leonardo da Vinci", "Michelangelo"], a: 2 }, { q: "What is the currency of Japan?", o: ["Dollar", "Yen", "Euro", "Won"], a: 1 }, { q: "Which country is the largest by area?", o: ["China", "USA", "Canada", "Russia"], a: 3 }, /* Add many more */ ];
function loadGkQuizQuestions() { gkQuestionsPool = [...allGkQuestions].sort(() => Math.random() - 0.5); currentGkQuizQuestions = gkQuestionsPool.slice(0, GK_QUESTIONS_PER_SESSION); currentGkQuestionIndex = 0; currentGkQuizCorrectAnswers = 0; if(gkTotalQuestionsDisplay) gkTotalQuestionsDisplay.textContent = currentGkQuizQuestions.length; }
function startGkQuizGame() { if (!currentUserId) { alert("Log in."); return; } loadGkQuizQuestions(); if(currentGkQuizQuestions.length > 0) { displayGkQuizQuestion(); showSection(gkQuizSection); if(gkNextButton) gkNextButton.classList.add('hidden'); if(gkFeedback) { gkFeedback.textContent = 'Select the correct answer!'; gkFeedback.className = 'feedback'; } if(gkAdStatus) clearFeedback(gkAdStatus); updateTokenDisplay(currentUserData?.tokens || 0); } else { alert("Could not load GK quiz questions. Please try again later."); showSection(mainContent); } }
function displayGkQuizQuestion() { if (!currentGkQuizQuestions || currentGkQuestionIndex >= currentGkQuizQuestions.length) { endGkQuizGame(); return; } const questionData = currentGkQuizQuestions[currentGkQuestionIndex]; if(!questionData) { console.error("Invalid GK question data at index", currentGkQuestionIndex); endGkQuizGame(); return; } if(gkQuestionText) gkQuestionText.textContent = questionData.q; if(gkQuestionNumberDisplay) gkQuestionNumberDisplay.textContent = currentGkQuestionIndex + 1; if(gkOptionsContainer) { gkOptionsContainer.innerHTML = ''; const options = questionData.o; options.forEach((optionText, index) => { const button = document.createElement('button'); button.textContent = optionText; button.dataset.isCorrect = (index === questionData.a); button.addEventListener('click', handleGkQuizAnswer); gkOptionsContainer.appendChild(button); }); } if(gkFeedback) { gkFeedback.textContent = 'Select the correct answer!'; gkFeedback.className = 'feedback'; } if(gkNextButton) gkNextButton.classList.add('hidden'); }
function handleGkQuizAnswer(event) { const selectedButton = event.target; const isCorrect = selectedButton.dataset.isCorrect === 'true'; const correctAnswerIndex = currentGkQuizQuestions[currentGkQuestionIndex].a; const correctAnswerText = currentGkQuizQuestions[currentGkQuestionIndex].o[correctAnswerIndex]; const optionButtons = gkOptionsContainer?.querySelectorAll('button'); if(optionButtons) optionButtons.forEach(button => button.disabled = true); if (isCorrect) { selectedButton.classList.add('correct'); if(gkFeedback) { gkFeedback.textContent = 'Correct!'; gkFeedback.className = 'feedback correct-message'; } currentGkQuizCorrectAnswers++; } else { selectedButton.classList.add('incorrect'); if(gkFeedback) { gkFeedback.textContent = `Incorrect! Correct: ${correctAnswerText}`; gkFeedback.className = 'feedback incorrect-message'; } if (optionButtons) { optionButtons.forEach(button => { if (button.dataset.isCorrect === 'true') { button.classList.add('correct'); } }); } } if (currentGkQuestionIndex < currentGkQuizQuestions.length - 1) { if(gkNextButton) { gkNextButton.classList.remove('hidden'); gkNextButton.textContent = "Next Question"; gkNextButton.onclick = goToNextGkQuizQuestion; } } else { setTimeout(endGkQuizGame, 1500); } }
function goToNextGkQuizQuestion() { currentGkQuestionIndex++; displayGkQuizQuestion(); }
async function endGkQuizGame() { if(gkOptionsContainer) gkOptionsContainer.innerHTML = ''; if(gkQuestionText) gkQuestionText.textContent = `Quiz Complete!`; if(gkNextButton) gkNextButton.classList.add('hidden'); const totalQuestions = currentGkQuizQuestions.length; await addTokens(currentUserId, GK_QUIZ_COMPLETION_BONUS, 'gk_quiz_completion_bonus'); if(gkFeedback) { gkFeedback.textContent = `You answered ${currentGkQuizCorrectAnswers} / ${totalQuestions}. +${GK_QUIZ_COMPLETION_BONUS} tokens added!`; gkFeedback.className = 'feedback level-message'; } showGameCompletionAd('gk_quiz'); }

// --- Event Listeners ---
if(showLoginButton) showLoginButton.addEventListener('click', showLoginForm);
if(showSignupButton) showSignupButton.addEventListener('click', showSignupForm);
if(signupButton) signupButton.addEventListener('click', async () => { console.log("Signup Button Clicked"); if (!signupEmailInput || !signupPasswordInput || !signupButton || !signupFeedback) return; const email = signupEmailInput.value.trim(); const password = signupPasswordInput.value; const referralCode = signupReferralCodeInput ? signupReferralCodeInput.value.trim() : ''; if (!email || !password) { updateFeedback(signupFeedback, "Email and Password are required.", true); return; } if (password.length < 6) { updateFeedback(signupFeedback, "Password must be at least 6 characters long.", true); return; } clearFeedback(signupFeedback, loginFeedback); signupButton.disabled = true; updateFeedback(signupFeedback, "Creating account...", false); try { const userCredential = await createUserWithEmailAndPassword(auth, email, password); const user = userCredential.user; console.log("Firebase Auth user created:", user.uid); const userRef = doc(db, "users", user.uid); const newReferralCode = generateReferralCode(user.uid); await setDoc(userRef, { email: user.email, name: 'Guest', avatarUrl: null, uid: user.uid, createdAt: serverTimestamp(), tokens: 0, referralCode: newReferralCode, referrals: 0, referredBy: null, lastLogin: serverTimestamp(), lastDailyClaimDate: null, tttLevel: 1 }); console.log("Firestore user document created."); let referralApplied = false; if (referralCode) { referralApplied = await handleReferral(referralCode, user.uid); } const successMessage = referralApplied ? "Account created & referral bonus applied! Logging in..." : "Account created successfully! Logging in..."; updateFeedback(signupFeedback, successMessage, false); } catch (error) { console.error("Signup Error:", error); let message = "Signup failed. Please try again."; if (error.code === 'auth/email-already-in-use') { message = "This email is already registered. Please try logging in."; } else if (error.message) { message = `Signup failed: ${error.message}`; } updateFeedback(signupFeedback, message, true); } finally { signupButton.disabled = false; } });
if(loginButton) loginButton.addEventListener('click', async () => { console.log("DEBUG: Login Button Clicked"); if (!loginEmailInput || !loginPasswordInput || !loginButton || !loginFeedback || !auth) { console.error("DEBUG: Login prerequisites missing"); return; } const email = loginEmailInput.value.trim(); const password = loginPasswordInput.value; console.log(`DEBUG: Attempting login for email: ${email}`); if (!email || !password) { updateFeedback(loginFeedback, "Email and Password are required.", true); return; } clearFeedback(signupFeedback, loginFeedback); loginButton.disabled = true; updateFeedback(loginFeedback, "Logging in...", false); try { console.log("DEBUG: Calling signInWithEmailAndPassword..."); const userCredential = await signInWithEmailAndPassword(auth, email, password); console.log("DEBUG: signInWithEmailAndPassword SUCCESSFUL for:", userCredential.user.uid); if (userCredential.user) { try { const userRef = doc(db, "users", userCredential.user.uid); await updateDoc(userRef, { lastLogin: serverTimestamp() }); console.log("DEBUG: Last login time updated."); } catch (updateError) { console.error("DEBUG: Error updating last login time:", updateError); } } } catch (error) { console.error("DEBUG: Login Error Code:", error.code); console.error("DEBUG: Login Error Message:", error.message); console.error("DEBUG: Full Login Error Object:", error); let message = "Login failed. Please try again."; if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password' || error.code === 'auth/invalid-credential') { message = "Login failed: Invalid email or password."; } else if (error.code === 'auth/invalid-email') { message = "Login failed: Invalid email format."; } else if (error.message) { message = `Login failed: ${error.message}`; } updateFeedback(loginFeedback, message, true); } finally { console.log("DEBUG: Login finally block reached."); loginButton.disabled = false; } });
if(claimDailyRewardButton) claimDailyRewardButton.addEventListener('click', claimDailyReward);
if(watchAdMainButton) watchAdMainButton.addEventListener('click', () => { console.log("Watch Ad Main Button Clicked (AdMob)"); if (!currentUserId) { alert("Please log in first to watch ads."); return; } watchAdMainButton.disabled = true; watchAdMainButton.textContent = 'Loading Ad...'; showAdMobRewarded_hopweb( 'watch_ad_main_button', WATCH_AD_REWARD, () => { console.log("Main Watch Ad (AdMob) success."); watchAdMainButton.textContent = 'Reward Granted!'; setTimeout(() => { watchAdMainButton.disabled = false; watchAdMainButton.textContent = 'Watch Ad & Get Reward'; }, 2000); }, () => { console.log("Main Watch Ad (AdMob) failure."); watchAdMainButton.disabled = false; watchAdMainButton.textContent = 'Watch Ad & Get Reward'; } ); });
if(playTttBtn) playTttBtn.addEventListener('click', () => { console.log("Play TTT Button Clicked"); if (!currentUserId) { alert("Log in first to play Tic Tac Toe."); return; } startTttGame(); });
if(playGkQuizBtn) playGkQuizBtn.addEventListener('click', () => { console.log("Play GK Quiz Button Clicked"); if (!currentUserId) { alert("Log in first to play the GK Quiz."); return; } startGkQuizGame(); });
if(tttRestartButton) tttRestartButton.addEventListener('click', () => { console.log("TTT Restart/Next Button Clicked. Text:", tttRestartButton.textContent); if (!tttRestartButton || tttRestartButton.disabled) return; if (tttRestartButton.textContent.includes("Start Level")) { resetTttGame(true); } else if (tttRestartButton.textContent.includes("Play Again")) { tttCurrentLevel = 1; resetTttGame(true); } else { resetTttGame(false); } });
if(tttBackToMenuBtn) tttBackToMenuBtn.addEventListener('click', () => { console.log("TTT Back Button Clicked (AdMob Interstitial)"); showAdMobInterstitial_hopweb('back_from_ttt', () => { showSection(mainContent); }); });
if(gkQuizBackToMenuBtn) gkQuizBackToMenuBtn.addEventListener('click', () => { console.log("GK Quiz Back Button Clicked (AdMob Interstitial)"); showAdMobInterstitial_hopweb('back_from_gk_quiz', () => { showSection(mainContent); }); });
if(navHomeBtn) navHomeBtn.addEventListener('click', () => { console.log("Nav Home Clicked"); showSection(mainContent); });
if (navReferBtn) navReferBtn.addEventListener('click', () => { console.log("Nav Refer Clicked"); populateReferralSection(); showSection(referralSection); });
if (navLeaderboardBtn) navLeaderboardBtn.addEventListener('click', () => { console.log("Nav Leaderboard Clicked"); fetchAndDisplayLeaderboard(); showSection(leaderboardSection); });
if (navHistoryBtn) navHistoryBtn.addEventListener('click', () => { console.log("Nav History Clicked"); fetchAndDisplayHistory(); showSection(historySection); });
if (navProfileBottomBtn) navProfileBottomBtn.addEventListener('click', () => { console.log("Nav Profile (Bottom) Clicked"); populateProfileSection(); showSection(profileSection); });
if (navProfileHeaderBtn) navProfileHeaderBtn.addEventListener('click', () => { console.log("Nav Profile (Header) Clicked"); populateProfileSection(); showSection(profileSection); });
if(logoutButtonProfile) logoutButtonProfile.addEventListener('click', async () => { console.log("Logout Button (Profile) Clicked"); try { if(auth) { await signOut(auth); console.log("User signed out successfully."); } else { console.error("Logout failed: Auth object not available.");} } catch (error) { console.error("Logout Error:", error); alert("Logout failed. Please try again."); } });
if (copyReferralButton) copyReferralButton.addEventListener('click', () => { if (!currentUserData || !currentUserData.referralCode || currentUserData.referralCode === 'N/A') { alert("Cannot copy link. Referral code not available or user not logged in."); return; } const referralLink = `${window.location.origin}${window.location.pathname}?ref=${currentUserData.referralCode}`; if (navigator.clipboard && window.isSecureContext) { navigator.clipboard.writeText(referralLink).then(() => { alert("Referral link copied to clipboard!"); const originalText = copyReferralButton.textContent; copyReferralButton.textContent = 'Copied!'; setTimeout(() => { copyReferralButton.textContent = originalText; }, 2000); }).catch(err => { console.error('Failed to copy referral link using API: ', err); alert("Could not copy automatically. Please select and copy the link manually."); }); } else { alert("Cannot copy automatically. Please select and copy the link manually."); try { const range = document.createRange(); range.selectNodeContents(referLinkDisplay); const selection = window.getSelection(); selection.removeAllRanges(); selection.addRange(range); } catch (e) { console.error("Failed to select text for manual copy:", e); } } });
if(editNameButton) editNameButton.addEventListener('click', () => { if(editNameForm && profileNameDisplay && editNameInput) { editNameInput.value = currentUserData?.name || ''; editNameForm.classList.remove('hidden'); editNameButton.classList.add('hidden'); profileNameDisplay.classList.add('hidden'); } });
if(cancelEditNameButton) cancelEditNameButton.addEventListener('click', () => { if(editNameForm && editNameButton && profileNameDisplay) { editNameForm.classList.add('hidden'); editNameButton.classList.remove('hidden'); profileNameDisplay.classList.remove('hidden'); } });
if(saveNameButton) saveNameButton.addEventListener('click', async () => { if (!currentUserId || !editNameInput || !db) return; const newName = editNameInput.value.trim(); if (!newName) { alert("Please enter a name."); return; } if (newName.length > 50) { alert("Name is too long (max 50 characters)."); return; } saveNameButton.disabled = true; saveNameButton.textContent = 'Saving...'; try { const userRef = doc(db, "users", currentUserId); await updateDoc(userRef, { name: newName }); if (currentUserData) currentUserData.name = newName; if (profileNameDisplay) profileNameDisplay.textContent = newName; alert("Name updated successfully!"); if(editNameForm && editNameButton && profileNameDisplay) { editNameForm.classList.add('hidden'); editNameButton.classList.remove('hidden'); profileNameDisplay.classList.remove('hidden'); } } catch (error) { console.error("Error updating name:", error); alert("Failed to update name. Please try again."); } finally { saveNameButton.disabled = false; saveNameButton.textContent = 'Save'; } });
if(avatarUploadInput) avatarUploadInput.addEventListener('change', async (event) => { if (!currentUserId || !storage || !db) return; const file = event.target.files[0]; if (!file) return; if (!file.type.startsWith('image/')) { updateFeedback(avatarUploadStatus, "Please select an image file.", true); return; } if (file.size > 5 * 1024 * 1024) { updateFeedback(avatarUploadStatus, "File size too large (Max 5MB).", true); return; } updateFeedback(avatarUploadStatus, "Uploading...", false); try { const fileExtension = file.name.split('.').pop(); const storageRef = ref(storage, `avatars/${currentUserId}.${fileExtension}`); const snapshot = await uploadBytes(storageRef, file); console.log('Uploaded avatar!', snapshot); const downloadURL = await getDownloadURL(snapshot.ref); console.log('Avatar URL:', downloadURL); const userRef = doc(db, "users", currentUserId); await updateDoc(userRef, { avatarUrl: downloadURL }); if (currentUserData) currentUserData.avatarUrl = downloadURL; if (profileAvatarImg) profileAvatarImg.src = downloadURL; updateFeedback(avatarUploadStatus, "Avatar updated!", false); setTimeout(() => clearFeedback(avatarUploadStatus), 3000); } catch (error) { console.error("Error uploading avatar:", error); updateFeedback(avatarUploadStatus, "Upload failed. Please try again.", true); } finally { avatarUploadInput.value = ''; } });
if(changePasswordButton) changePasswordButton.addEventListener('click', async () => { if (!auth || !auth.currentUser) return; const currentPassword = prompt("For security, please enter your CURRENT password:"); if (!currentPassword) return; const newPassword = prompt("Enter your NEW password (min. 6 characters):"); if (!newPassword || newPassword.length < 6) { alert("Invalid new password. Must be at least 6 characters."); return; } try { const user = auth.currentUser; const credential = EmailAuthProvider.credential(user.email, currentPassword); await reauthenticateWithCredential(user, credential); console.log("User re-authenticated successfully."); await updatePassword(user, newPassword); alert("Password updated successfully!"); } catch (error) { console.error("Error changing password:", error); if (error.code === 'auth/wrong-password') { alert("Incorrect current password."); } else if (error.code === 'auth/weak-password') { alert("New password is too weak."); } else { alert("Failed to change password. Please try logging out and back in, or contact support."); } } });
if(submitWithdrawalButton) submitWithdrawalButton.addEventListener('click', async () => { if (!currentUserId || !currentUserData || !db) return; const amount = parseInt(withdrawalAmountInput.value, 10); const method = withdrawalMethodSelect.value; const details = withdrawalDetailsInput.value.trim(); clearFeedback(withdrawalFeedback); if (isNaN(amount) || amount <= 0) { updateFeedback(withdrawalFeedback, "Please enter a valid positive amount.", true); return; } if (amount < MIN_WITHDRAWAL_AMOUNT) { updateFeedback(withdrawalFeedback, `Minimum withdrawal amount is ${MIN_WITHDRAWAL_AMOUNT} tokens.`, true); return; } if (amount > (currentUserData.tokens || 0)) { updateFeedback(withdrawalFeedback, "Insufficient token balance.", true); return; } if (!method) { updateFeedback(withdrawalFeedback, "Please select a withdrawal method.", true); return; } if (!details) { updateFeedback(withdrawalFeedback, "Please enter withdrawal details (UPI ID / Number).", true); return; } submitWithdrawalButton.disabled = true; submitWithdrawalButton.textContent = 'Submitting...'; try { await addTokens(currentUserId, -amount, `withdrawal_request_${method}`); const withdrawalRef = collection(db, "withdrawalRequests"); await addDoc(withdrawalRef, { userId: currentUserId, email: currentUserData.email || 'N/A', amount: amount, method: method, details: details, status: 'pending', requestTimestamp: serverTimestamp() }); console.log("Withdrawal request submitted successfully."); updateFeedback(withdrawalFeedback, "Withdrawal request submitted successfully! It will be processed manually.", false); alert("Withdrawal request submitted!"); withdrawalAmountInput.value = ''; withdrawalMethodSelect.value = ''; withdrawalDetailsInput.value = ''; } catch (error) { console.error("Error submitting withdrawal request:", error); updateFeedback(withdrawalFeedback, "Failed to submit request. Please try again.", true); alert("Error submitting withdrawal request."); } finally { submitWithdrawalButton.disabled = false; submitWithdrawalButton.textContent = 'Request Withdrawal'; } });

// --- Initial Setup ---
document.addEventListener('DOMContentLoaded', () => { console.log("DOM fully loaded and parsed"); initializeAppUI(); });
function initializeAppUI() { if (!authSection) { console.error("Essential element #authSection not found!"); return; } showSection(authSection); if(app && auth && db) { initializeAdMob_hopweb(); initializeUnityAds_hopweb(); } else { console.error("Cannot initialize Ads, Firebase failed to load."); } console.log("App UI Initialized."); }